<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAqkAAABLCAYAAABTNR5nAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wwAADsMBx2+oZAAAFPRJREFUeF7tneuRI8USRnFhbcAFfMAEbMAFPMADPMACLOA3ETiAB/gwN84G30Zu
        3qzqlkYaeoZzIiqkrs7KV1VXp1ra2W9eREREREQuhkWqiIiIiFwOi1QRERERuRwWqSIiIiJyOSxSRURE
        RORyWKSKiIiIyOWwSBURERGRy2GRKiIiIiKXwyJVRERERC6HRaqIiIiIXA6LVBERERG5HBapIiIiInI5
        LFJFRERE5HJYpIqIiIjI5bBIFREREZHLYZEqIiIiIpfDIlVERERELodFqoiIiIhcDotUEREREbkcFqki
        IiIicjksUkVERETkclikioiIiMjl+DBF6t9///3y66+/vnz33XcvP//88z+9M8h++vTpK7k///zz5ccf
        f/zcL7dzS/7vBRu//PLLy7fffvvy+++//9P7MSGHrEVi7vz222+f8/zNN998zgV5l68hRz/88MPL999/
        /0/P47nHxn9pDYs8Eq4X9rxcN6+553Rdz4T94Z59iPh6nfJf5KsilWSweebmxzGJemaSHnWD/euvvz5v
        /vh+5O80+RSp3HAYL7dDTrlpn8l/5Zb5r3P8kW7wxNXjIYdTkUqOuTbpZxyb33/tg9XRmiE3uQk9s0jF
        BnNxi42PsIbxmzjegrew9Zp70HTtPhPs5T6V9b2y/9NPP33eG5Djfd9LgPte/cA76aIvMjQe5twzJ+xp
        0UGb8o6tKkOLTzmX43vvOdB1PRPm6J59iPgsUkuRmgVdF0AW1bOSxCJ9pG58fo2/iVfu55b83zP/b7m5
        vBVs+mfjuXfD+yjcsma4sT47V/fMx3tfw+T/rXx/C1uvWSO3XLuvhfsbhSQ2yQuvrCMaxWaFQpb1TzHJ
        uOlaYAxj+dAEXFt9XSJDXUB9gE10IJMPyrdSi2z0dr8DMrQzoOvsniDvjy8V2WqiWcDPWABZ/I/W/ZoF
        yzjGy/2czf+9888Gio23ujE8m+nGsOOeouijcOuaeYtc3WPjva9h8v9Wvr+FrXvXyK3X7mvBXi/q8lSe
        gjXEL54yBsbRx7lAoUnxWqEwpD+Q/16Mpsisum4FG+jgep6eymL37HWOnrOy8v74qkhdfXLJAuAVuboo
        suH2hcJFkcVM42LIBcaiZHHmHI2Nor4PU98OZPGDCyg26lcdvHIOfdVfSHwVLnR8jx/EVHWxSXDBkYd8
        FRubHfT3uGl9U6gXcNVD3vLEG6KPdmbDqHEnP3XOq/+8dp073wLnkNsxzX/G7PINWW+5MdT1R9vZviV/
        2KxPKrofUPPVWzbeXTycq2NoxMN1Uv0EfO2yu2sC+3VtRh/taH5C9Z1x3adOzS8x4h/vM1edyEQ/71ey
        uzWzAn008pl54jhzE3ZzfRRTbFReu4bRV9+HqW8CW/1aT/zEWX2Bvlcjg/+ruUDn6lxAJjZ5JYfx+5Z1
        srLFuL6+sUUf5JiG/vRP7PKZfRI95CTF4Ora/TfANvMXMpcd4kiszDky/RoiT0excA6ZXU6PwA9yix7y
        2tckflXfWDN1vis9DnQxT5k3xtT9faerk3WGj9hg3hmHXtYYoCN9xFVjQR5f6hqr1ybzwPs+ltcqF+hj
        fumfxhJb+vAJGUgfLTGjt/fl2kxukCGPtOSQfCS3ycEz+bKS4/Buc4JpcU99BJnNmcA5Rnelj0EWORIa
        pr4d6EQWvcSRCzbJxJdsMNU2cEx/QLbKoa/ryhgWYreZBQKMYWLThzwy9UJnEdCX/Ec3/gJjazzII0t+
        0L2DPCZudGAXHckrupgfYkI2/sWXI98CfcnXEV32KN+QvvgBmW/G7zibP+InF5kbZDhf12ByiQ5IftAf
        7o2H9/Gzgw/VjxXEip34hH/4TFz0xe8VnCfm+MUrx5NPoeaXmGOvr5GAbHJBrpCteZiI7jOQJ+YWG+hl
        HOOxE47m+iimPh+PWsPTvjf1TaAj6zF6sZU4uLYD8RFv4s88dP8q0bcC/ehILOiOL3DLOlnZQjfnEg9j
        Eyv2eE++aJynf8Uqn8lNjaPK4tcuTxXkzrR7YFy9njkmnx18j43kruc8Me3yFZnk5R6Sx742AvarD8xF
        fO757v4y31wn+Mf8Z63xHna6OuioPkY+fdjiPSQvOcYeffWapY+cI4dfjEcm/mQsdiOX2KKPPnRmzomH
        PmwgixzjkcFGiM+JAXofuvCJPl4zx8lh9lKIz4x5Jl9dFSQlN6I6IR3OJ3Gh99WND3LDrEx6sJsJDVPf
        ipVO+pNwmOQ4rj5m8uskcPFXX7Jo6sWevpo/jpn0Cn1VF/kib4HFhkz1Mz5yLnS/d0x+QN2MIbazyM/4
        BlPfii57S755xYdc5Gc5kz9i7TnK+o1v+MQmUMk6C7fGU+k+BcbW8Tuiu65N4mYeu+8V1kEfBz2+ifhd
        19IK9NWbK2OO5hLddc3smHIV/2L3zFzvYuo2bp3z3Rqe/J/6VmCjFsfA2BoL66DLJF58iq9HLT6lOK7X
        F1QZmHJ6q63I1zUE6O5zGpnEf9QSe79Oqq3Y5/XfAtu9IMWnmuuQ2KHOcSUxcX4F5/qauZXqH3OFzTpn
        2Og+rPLd/eWeVYuzFHt13ErXRGS7P6u+nnuOex9yPYePtsExsmGKeerD3hm59HX/Hs3/3XHYXDDKjQwH
        CHTacM4kEwgki5BWmcaskt37Vkw6s3HWBE9yHHcfAzrwgfPVl7OTRz57DMj0zRTINzdPNsiuZ/IxfdWH
        FV0fxN+p9U165xtMfSt2skf5xgc25zPFUCW5qqQv+YvdqeUmlU+WFcb1fIVb1g9MfgJj6/gdK92T7xVy
        u7K9Gwcrvyeww3XBmL7HrEA38meYcsV6qToS09Qy17uYJhvhtWt40j31rcBGz1XmFh9SUK/WXu8PnF+d
        Y21N/qGv9u9yWtnZon/yk2PWFXvrmf1hlU/WJNcz5ycfVvbfEvJdPxBBz3WgLzlfzXFi4vwEOUHP2et1
        RfcvexLrE7DffVjle+Uvc08hmFqmjlvpmohst7Hq67Fx3PvOjn2NDY6RDVPMUx/2zsilr/v3aJa7BIsw
        zk6f1KbE1T4WCEliLJt1dFUmPatk974Vk84pwZPc5CNj2Ki4iHjffZl0p6/qJwdVrh+H3Li5uPoNFSYf
        09d1TXR9EH+POPINpr4VK1/O5DsxI3cLGVdJX/KHvaMYuDGkwJqOw9l4YjtMfkIfv+NW3YH5XdnejYMj
        3Z3kZMrdBLrPyMEqV1UH54/07WKabBDTI9bwpHvqWzHlKrZ5nZ4wQfzq/YHzq3Ps95N/6Kv9u5xWdrbo
        X/nJ/lSf0O2Kql0+cx9kfSJXC8Kd/Q5yZ9otcA/pBSqgZ4qJvthYzXFi4vwE/a8tUKH7h07WDrZTL3Qf
        Vvnu/qIrxSn3rKs+ST0z9jU2OEY2TDFPfdg7I5e+7t+j+RIBkzqRG1Z1bnKs9rFIWCD1KWECr0x6Vsnu
        fSsmnVmk9YKe5LqPmQQumtB9uWXyyAdjOcdNrH+dijx52/nZfYT0VR9WTH7F3+4PpO+MbzD1reiy8eNs
        vlPo13V2BPYYU0lf8oe9/sEMWNeRATZACgzGkpse963xVCY/oY/fsdK9KkJDbPebEXZ342Dl9xGsM3K4
        2ocCunueV0y5IiZ05IkN54/mehdTt5GcP2IN93Ew9a1Ab89V9kJsx49pH4rMBOdX5/Btyif6qt+7nFZ2
        tuL/6jywX+HP5FM4k0/WA9c6a5QCGM7YfxbM2VSgQvakTp0DxnLc18du7rlm+p5wL1PO0c19kRwTQ/dt
        le8eR9ZgfJ3GrXRNRLb7s+rrsXHc+86OfY0NjpENZ/OAvTNy6ev+PZovEbA4pgWYTbQXJ/Vmwrjq7BRQ
        Aq/UMYHE9g2F4z4BKyad3ACIrzLJdR8nn/tiODt5vO/2Ol03THq6T+mrPqzo+gIbQ72wgc04smd8g5X+
        iS7Le/oq3W7Pd8bUomDHZCN90clmPOlkzdeNr+ejc088YRoLt1wLK91cC7vCPtd8CrmA3cmnysrvCWQr
        Z8Zyvo9b0XMNiS2Fxpm53vnVbUyyXabPS8Z0HxjzzL0w34b0J7nxp6+bwPnVOfQzthdQ9B3laWJnq+cx
        9GJqJRdW+US+j0FPcnqk91nsClTIGq9+xde6xlgHPXaO+70SHlmgwirnxMW9qOY5rPLdZfvxNG6layKy
        3Z9V35TT3nd27GtscIxsSBz1Q2n90Bqw1/sydurr/j2aLxFgjA2wBoATLJgePIuYfmRZ9AkKOcbkU1pu
        hPQlYYyJjao7fdnkuCjo42aBX8ii5+hCSRy5iNHD2HpRx7++OecTaB3LcS5sXokd/Zxjk49MnSj8pq8W
        8sSZeGn5pFg3DfriK3FGNzmJ/vhILgJ26EsOVyRuYuh5jC3so49W5c74tsrriuQD8D06d/mmD5maW87T
        h8wRZ/JHfNilD/+IL6+B9zmfRh8+JGdn4knOGMu4+BU/OR928zeBLuSxl6IMO+Q9x7yij5a+Gj/y6MHf
        9IXkgNcQv/tckNs635CcYY/G2Jyf/IK+ZnYgh3zkiIPjzAfUWONPXsMqpoyl8R7OzDl9yByt4UfshZGF
        rIeat8TGK+fxjfjpy7gOMnVdVrJGk2d0ZJ1k3mCV087OVnKNrgr26Mu64Rh/Vvmq81DBd/KdPPBa85JY
        0Y/u9D8TYiY2bNaW+QvkGt/xizzwvuYfEg85huSz6mE865AcdZvoS0457mNXkDfmo17XlZrXSvyrayay
        dQ2gu8Zer6OMnXStID/I1nUy2cUefbGdvr5HZGydjzo2TDaIp8tNNgAZZJPnOpZ5Ir/ERB+v2IPkq+4T
        U744Tx/yz+TLHQcnM6FMMsYJmkBq4ECAkcnEcRwdkODRgXwCijxk8utiZ3ySm35e8evMBYAdJpXxNN7H
        J0BHzsUG8Fr7E3f6eUUP/hMrvufCTENm6gPkyUXyVhtjgEWCDH3YwT65oI9zk49T30SPm9ZhAcY+erNo
        4ci3M/o7ff7vyfdqPieiO22XP2xnHWG/5zX5SE5qiw9H8YRsCpyD7hMx9thp3adOckMcWXforvOKT5wj
        jqoPmfjBPNfjkFho0P2u+nL9Ywe/gLhr/vCTnMHKr75mduBz3c+yOXd2c72LqfbT0P3INczY1+yFGZcc
        81pvPIDOrD/OVx/P2JjARmxmTuML8MpxWs3pWaY8Bvax5I2W9XsrxF99TX4q/dp9JtiIL70RY6XOK2uP
        sfR16lxN10fNY281ZnKOnaM1c3busw5Dn2+OsVX7aMBYfKHhV/YSbJODSdeKLouO3kdb+dL7Jrkzfdi9
        d2z6gHxwTD7IE/3MP/3kZpqf3jflgL5ncVxJyEPYbRLPnGB5DrnAO9wMueivQDaryc8OMmxUO7JZdShE
        zsLmdkvBcMYvmWGuyPet5AZ0Zt2c5dk3MhH5mFikvgH5NDKRT7zyfkjxt+KWou2ZxM8zxQZrcPoQVZmK
        VArOs4XQPWv9jF8yw1xZpIrIe8Yi9Q3I1zS8svFz0+XmzlNUb8LvD+aN+aQY5T1fJ9GYW+bznq8Wn0GK
        jf4VZQW/85XYEfnqL+uV2He6K+QkXymd4Ra/5P/JB5RbPxRA9ivm9xEw5+jrX0mLiBxhkfpGcMOtv+/h
        PUWEBer7hBt4fsdI4yt+CoKrFFV56pn22qdYVRftkU/Z5LHkw0ltZ+nr5p4nsZUUy7WJiJzFHUNERERE
        LodFqoiIiIhcDotUEREREbkcFqkiIiIicjksUkVERETkciyLVP71Mv9a+ZH/GpN/OerfyhMRERGRI5YV
        KH9KJ38y6VE8s0g9+/caz/IIffz5lUf8SSJ0HP3Jn0fHLyIiIvJvsq1A8zfz3gOPLn4foY+/MfiIvyeJ
        jt3fK6RAfe3fMxQRERG5EhapC95Lkcr/5PPp0yeLVBEREflQfFWB8r8i8T/nUJjyVX/eB/53JH6nSlFE
        P+fr18wUU5ynwKN44jyNcfmN667442vt+IAu/ns+bJ0pwo6KSuzn5wvoi+4VK33E0n1EJ32dXZGKHmzE
        H96vZOmf4idfjEVHmsWqiIiIfAS+VKAUWRQ8KZQ4TuETKDIpziiOKLLy30LyHhjL+fyXn+jg/R9//PHl
        3K6YpLBN0YduCuBaXO5+d7nTy7gaG68p7las9BE7sTGWfOAfslNxSF9sdoiPWAGdxLiSpX9XfOLL7ryI
        iIjIe+NzlUaRNBWBKQ4DhRUtUKBxvhZXFGwUoxOc2xWTgC50ojtQBFNURi86kDlq6EpsVR9EB6ToPGop
        BONjf4rc5aeW+Hmt4/EzeZzGTS3w3iJVREREPhKfK508NaVQqtRCroJcvi7nfIorYEwKsc7uXEixV3VC
        ntquWOlNbB3k79EHKx87FI4rmTy5RiZPolegY1eE4otFqoiIiHwkPldpFDhnCjmKqRSnFFmrJ6mrAm93
        LqwKwJWPYaU3Px/oIH+PPlj52MHnnQznsJNidQVyu/P4sjsvIiIi8t74XKWlAOQ3oZVeyHHMTwDqb1B7
        sYbMqsDbnQuTTlgVm2GlN7H1p5XI36MPVj52sH0kAxT7FKr5jWoHHRapIiIi8l/ic5XGbyOnQqcXcl1m
        KtYYsyrwdufCpBP4PSr/UGnFSm9i48lvBfkaW2fn58rHzq5I7bnmeOUPOrp8hXG78yIiIiLvjS9VUf6R
        VIq5/AmpFGP5x0t5ksrvUikaM4ZGf8b0p7I5R+tPNSspALGT38hSgGG7/2a2snoKWX1CD/rxNX0rVvqA
        8Yyt/4hsggK55yFQBOMP/tHQtSqM0VH/kVWH3GRs/wdincxhh3inHOcnHVkXIiIiIm/BlyqNQilFJ8UK
        BRSFD8VTCh8KJc7RKFooaHiPHOMZW1t9itjPrUiRil108x79q2LvDIxFB7oo0OrxrZAXxqWh5x7y57yi
        h3jJ4T3kaXHmYQc2J59XRWrmY1cki4iIiDya26u0J5OiqBa4z+DeIlVEREREno9FqoiIiIhcjstVafk6
        /dlfL+c3uPd+xS4iIiIiz+NSRWqebqZNv518BNUG7dlPbUVERETkNvy+W0REREQuh0WqiIiIiFwOi1QR
        ERERuRwWqSIiIiJyOSxSRURERORyWKSKiIiIyOWwSBURERGRy2GRKiIiIiKXwyJVRERERC6HRaqIiIiI
        XA6LVBERERG5HBapIiIiInI5LFJFRERE5HJYpIqIiIjIxXh5+R861tWWKWDNrwAAAABJRU5ErkJggg==
</value>
  </data>
</root>